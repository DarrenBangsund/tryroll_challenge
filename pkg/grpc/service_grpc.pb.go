// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TryRollServiceClient is the client API for TryRollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TryRollServiceClient interface {
	GetERC20Tx(ctx context.Context, in *GetERC20TxReq, opts ...grpc.CallOption) (*GetERC20TxRes, error)
}

type tryRollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTryRollServiceClient(cc grpc.ClientConnInterface) TryRollServiceClient {
	return &tryRollServiceClient{cc}
}

func (c *tryRollServiceClient) GetERC20Tx(ctx context.Context, in *GetERC20TxReq, opts ...grpc.CallOption) (*GetERC20TxRes, error) {
	out := new(GetERC20TxRes)
	err := c.cc.Invoke(ctx, "/grpc.TryRollService/GetERC20Tx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TryRollServiceServer is the server API for TryRollService service.
// All implementations must embed UnimplementedTryRollServiceServer
// for forward compatibility
type TryRollServiceServer interface {
	GetERC20Tx(context.Context, *GetERC20TxReq) (*GetERC20TxRes, error)
	mustEmbedUnimplementedTryRollServiceServer()
}

// UnimplementedTryRollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTryRollServiceServer struct {
}

func (UnimplementedTryRollServiceServer) GetERC20Tx(context.Context, *GetERC20TxReq) (*GetERC20TxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20Tx not implemented")
}
func (UnimplementedTryRollServiceServer) mustEmbedUnimplementedTryRollServiceServer() {}

// UnsafeTryRollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TryRollServiceServer will
// result in compilation errors.
type UnsafeTryRollServiceServer interface {
	mustEmbedUnimplementedTryRollServiceServer()
}

func RegisterTryRollServiceServer(s grpc.ServiceRegistrar, srv TryRollServiceServer) {
	s.RegisterService(&TryRollService_ServiceDesc, srv)
}

func _TryRollService_GetERC20Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryRollServiceServer).GetERC20Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TryRollService/GetERC20Tx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryRollServiceServer).GetERC20Tx(ctx, req.(*GetERC20TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TryRollService_ServiceDesc is the grpc.ServiceDesc for TryRollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TryRollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TryRollService",
	HandlerType: (*TryRollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetERC20Tx",
			Handler:    _TryRollService_GetERC20Tx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/service.proto",
}
